1)operation scope filtering based on users org, div, dept details 
Todo:
role and wfc shd not have any relation - done
user can have only one wfc  - done 
user to dict now gives wfc dictionary as well

tesing to be done/changes to that affect  - upto verification unit test is passed 

workcontext to be instantiated as a class 

workcontext to be made avilable to  api route function when required

ext  important works:

2) centralized catalogue for all microservice endpoints and 
3) client for tokenleader

write tests
handle authentication failure

token accept using header not body

admin_ops: 
user add  - done
user list -  list all users done , specific user to be rectified
user delete  - 
password change - not reqd , delete and recreate
fixed python path in the cli shell script file to be removed - reduced problem by hardcoding name of venv 

 
 
normal user registration api 

register user in db
password change 
register role 
asssign role to user
retrive role after authentication in sub
        
based on domain choose authentication backend as ldap or db 

"catalog": [
            {
                "service-endpoints": [
                    {
                        "id": "",  "interface": "admin", "url": "http://127.0.0.1:8776/v1/64b6f3fbcc53435e8a60fcf89bb6617a",
                        "region": "regionOne"
                    },
                    {
                        "id": "", "interface": "internal", "url": "http://127.0.0.1:8776/v1/64b6f3fbcc53435e8a60fcf89bb6617a",
                        "region": "regionOne"
                    },
                                    ],
                "service-type": "volume",
                "service-name": "volume",
                "service-id":""
            },


organization: 

division:

department:

work-fucntion: 

user:  will have  org , div, depart, workfunc 

user is mapped with role  - many to many , one user can be mapped to many role and vise vesa


token should return all the  above attributes


authorization at each servie 
====================================== 

service_access_to_policy.yml defined in  each service

- "micros1:firstapi:read_all_entries"
    
- "micros1:firstapi:read_single_entry"
   
- "micros1:firstapi:add_new_entry"
    
   	 
role_to_acl_map.yml
===============
- name: micros1_author
  allow:
  - micros1:firstapi:read_all_entries
  - micros1:firstapi:read_single_entry
  
- name: micros1_author
  allow:
  - micros1:firstapi:read_all_entries
  - micros1:firstapi:read_single_entry
  
 
 
  
  
>>> b
{'roles': [{'name': 'micros1_author', 'allow': ['micros1:firstapi:read_all_entries', 'micros1:firstapi:read_single_entry']}, {'name': 'micros1_author', 'allow': ['micros1:firstapi:read_all_entries', 'micros1:firstapi:read_single_entry']}]}
>>>

how does a verifed token look
-------------------------------
{"message":"Token has been successfully decrypted","payload":{"exp":1548487022,"iat":1548483422,"sub":{"email":"admin@itc.in","id":1,"role":"admin","username":"admin"}},"status":"Verification Successful"}


@enforce_acees_rule('micros1:firstapi:read_all_entries') 
get the users role list 
with the role list if micros1_author is present
read role_to_acl_map and check if that role has the var passed in enforce_acees_rule which is 'micros1:firstapi:read_all_entries'
loading roles shd check from database that the role name is valid
  
route api 
==================
1. segregate methods by GET , POST , PUT , PATCH, DELETE
2. decorator to  accept rule_name as var 
   unack token to get the role 
    read the role.yml to check if the role acl list has the rule and its permission 
    returns the original function once true

scope filtering
===================
bsed on user org , div , dept a context to be created and stored in user session
this context will act as filter for persistenace and data filtration





    
    


   	 
 
	





client for 
	a. sending the auth info and getting token 
	b. connecting to other micro services using the token
	

other microservoce to have client for connecting to auth service to verify the token 

force microservices to validate token before processing api request

====================================
 
Client to Microservice
Step1: C1--> T1 : 	C1 provide Domain name, user name , password and intended api operation request for token 
Step2: T1-->C1 : 	a.T1 checks the user name and password against LDAP if domain is ITC else against local database. 
b. After matching the username and password it retrieves the roles / access level of the user
 Status: Done
c. Generates the token with username and role encrypted within token
 Status: Done
d. Also returns whole URL path of intended API operation (http://FQDN:port/<Api>)

Step3: C1--> M1 	C1 receive the token and issue a fresh request to M1 url path using the received token / along with the token. 
Step4: M1-->T1 		M1 calls T1 to unencrypt the token and retrieves access/ role information
Status: Done
Step5: M1-->C1 		return result

***END POINT FOR USER MANAGEMENT ON T1 DB***
Step1: Read from settings.ini, token admin section about the token admin username and encrypted password
Status: Done
Step2: Create a CLI utility to register token admin in T1 DB
Status: Done
Step3: Create an endpoint allows admin to create/update/delete a user using http API operation with token authentication
In summary,  user curd operation end point to have a check which allows operation only if the user name is admin and role is admin . the retrieval if role and usr id  is done using the  token authentication module as described I the section above
Status: WIP. 'Create' Done 

Microservice to Microservice communication step by step
M1-->T1 Request for token against M2 
T1--> M1 Provide token
M1-->M2 M1 connect to M2 with token
M2--> T1 M2 calls T1 to verify the token and retirves access
M2--> M1 return result
 
 

 ================================================
 
 
 
 
 
 

